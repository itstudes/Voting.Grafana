version: '3.4'

services:
  #OTLP metrics injested through Prometheus
  prometheus:
    image: prom/prometheus:latest
    depends_on:
      - voting-api-01
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus-config.yml"

  #OTLP traces injested through Tempo
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo/tempo-config.yaml" ]
    volumes:
      - ./tempo:/etc/tempo
      - ./tempo-data:/tmp/tempo
    ports:
      - "3200:3200"  # Tempo
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP

  #OTLP logs injested through Loki
  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./loki:/etc/loki
      - ./loki_data:/loki
    user: "root"
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3100/ready 
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  #Promtail agent to scrape other logs and send to Loki
  promtail:
    image: grafana/promtail:2.8.0
    depends_on:
      - loki
    command:
      - -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log 

  #Metrics, logs and trace data displayed in Grafana
  grafana:
    image: grafana/grafana:latest
    depends_on: 
      - prometheus
      - loki
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/var/lib/grafana

  #Voting API service
  voting-api-01:
    image: ${DOCKER_REGISTRY-}votinggrafana
    build:
      context: .
      dockerfile: Voting.Grafana/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:8080
      - OTEL_RESOURCE_ATTRIBUTES=service.name=voting-grafana-api-01,service.version=1.0
      #- ASPNETCORE_HTTP_PORTS=8080
      #- ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "8080:8080"
      #- "8080"
      #- "8081"
    depends_on:
      loki:
        condition: service_healthy
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
      # - /var/run/docker.sock:/var/run/docker.sock


  #Load testing with k6
  k6:
    image: loadimpact/k6:latest
    volumes:
      - ./k6/tests:/scripts
    entrypoint: tail -f /dev/null
    links:
      - voting-api-01
    depends_on:
      - voting-api-01