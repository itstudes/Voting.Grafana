<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\nlog-internal.log">

	<!-- enable asp.net core layout renderers -->
	<extensions>
		<add assembly="NLog.Web.AspNetCore"/>
		<add assembly="NLog.Loki" />
	</extensions>

	<!-- the targets to write to -->
	<targets>
		<!-- write logs to file  -->
		<target name="file" xsi:type="File"
                layout="${longdate} ${level:uppercase=true} [${threadname:whenEmpty=${threadid}}] ${logger} - ${message} ${exception:format=ToString}"
                fileName="${basedir}/logs/${logger:shortName=true}/${shortDate}.log"
                keepFileOpen="true"
                encoding="utf-8"
                autoFlush="false"
                openFileFlushTimeout="10" />

		<!-- write logs to the console -->
		<target name="coloredConsole" 
				xsi:type="ColoredConsole"
                useDefaultRowHighlightingRules="false"
                layout="${longdate} ${level:uppercase=true} [${threadname:whenEmpty=${threadid}}] ${logger} - ${message} ${exception:format=ToString}" >
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="Blue" />
			<highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
		</target>

		<!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
		<target xsi:type="Console" 
				name="lifetimeConsole" 
				layout="${MicrosoftConsoleLayout}" />
		
		<!-- write logs to Loki -->
		<target name="loki"
				xsi:type="loki"
				layout="${level}|${message}${onexception:|${exception:format=type,message,method:maxInnerExceptionLevel=5:innerFormat=shortType,message,method}}|source=${logger}"
				endpoint="http://loki:3100">
			<!-- Prefer using a JsonLayout as defined below (for better parsing in Loki), instead of using a layout as defined above -->
			<layout xsi:type="JsonLayout" includeEventProperties="true">
				<attribute name="level" layout="${level} "/>
				<attribute name="source" layout="${logger}" />
				<attribute name="message" layout="${message}" />
				<attribute name="exception" encode="false">
					<layout xsi:type="JsonLayout">
						<attribute name="type" layout="${exception:format=type}" />
						<attribute name="message" layout="${exception:format=message}" />
						<!-- Exclude stack trace in production environments-->
						<attribute name="stacktrace" layout="${exception:format=tostring}" />
					</layout>
				</attribute>
			</layout>
			<!-- Labels (at least one is required by Loki) -->
			<label name="ServiceName" layout="voter-info-api-01" />
			<label name="ServiceVersion" layout="1.0" />
			<label name="env" layout="${hostname:lowercase=true}" />
		</target>
	</targets>

	<!-- rules to map from logger name to target -->
	<rules>
		<!--All logs, including from Microsoft-->
		<logger name="*" minlevel="Info" writeTo="file" />

		<!-- Write all logs to the coloured console -->
		<logger name="*" minlevel="Info" writeTo="coloredConsole" />
		
		<!-- Write all logs to Loki -->
		<logger name="*" minlevel="Info" writeTo="loki" />

		<!--Output hosting lifetime messages to console target for faster startup detection -->
		<logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole" final="true" />

		<!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
		<logger name="Microsoft.*" maxlevel="Info" final="true" />
		<logger name="System.Net.Http.*" maxlevel="Info" final="true" />
	</rules>
</nlog>